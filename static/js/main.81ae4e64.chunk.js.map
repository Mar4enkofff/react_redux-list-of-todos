{"version":3,"sources":["types/Filter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","todo","type","payload","currentTodoReducer","state","action","value","initialState","query","status","All","filterReducer","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","getTodoInfo","className","map","classNames","id","completed","title","onClick","userId","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoFilter","useState","searching","setSearching","dispatch","onSubmit","event","preventDefault","onChange","filterActions","target","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","handleClose","user","setUser","useEffect","getUser","selectedUserId","href","email","name","App","isLoading","setIsLoading","hasError","setHasError","setUserId","fetchData","a","data","todosActions","filteredTodos","useMemo","copyOfTodos","queryCorrect","trim","toLowerCase","includes","currentTodoActions","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81ae4e64.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\n\ntype SetStatusAction = {\n  type: 'filter/SETSTATUS',\n  payload: Filter,\n};\n\ntype SetQueryAction = {\n  type: 'filter/SETQUERY',\n  payload: string,\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR',\n};\n\ntype Action = SetStatusAction | SetQueryAction | ClearQueryAction;\n\nconst setStatus = (value: Filter): SetStatusAction => ({\n  type: 'filter/SETSTATUS',\n  payload: value,\n});\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/SETQUERY',\n  payload: value,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/CLEAR',\n});\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype State = {\n  query: string,\n  status : Filter,\n};\n\nconst initialState: State = {\n  query: '',\n  status: Filter.All,\n};\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SETSTATUS':\n      return { ...state, status: action.payload };\n    case 'filter/SETQUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodos = { type: 'todos/SET', payload: Todos };\n\ntype Todos = Todo[];\n\nconst set = (value: Todos): AddTodos => ({\n  type: 'todos/SET',\n  payload: value,\n});\n\nexport const actions = { set };\n\ntype Action = AddTodos;\n\nconst todosReducer = (todos: Todos = [], action: Action): Todos => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  currentTodo: Todo | null,\n  getTodoInfo: (todo: Todo, id: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  currentTodo,\n  getTodoInfo,\n}) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={classNames({\n                'has-background-info-light': currentTodo?.id === todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => getTodoInfo(todo, todo.userId)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames({\n                      'far fa-eye': currentTodo?.id !== todo.id,\n                      'far fa-eye-slash': currentTodo?.id === todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Filter } from '../../types/Filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [searching, setSearching] = useState('');\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector(state => state.filter);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Filter));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n    setSearching(event.target.value);\n  };\n\n  const handleClear = () => {\n    dispatch(filterActions.clearQuery());\n    setSearching('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n            value={status}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searching}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searching && (\n            <button\n              aria-label=\"none\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  handleClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ userId, handleClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(selectedUserId => setUser(selectedUserId));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(user && currentTodo) ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"none\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo.completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (<Loader />)}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as currentTodoActions } from './features/currentTodo';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [userId, setUserId] = useState(0);\n\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setHasError(false);\n\n    const fetchData = async () => {\n      try {\n        const data: Todo[] = await getTodos();\n\n        dispatch(todosActions.set(data));\n      } catch (error) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    let copyOfTodos = [...todos];\n\n    copyOfTodos = copyOfTodos.filter(todo => {\n      switch (status) {\n        case Filter.Completed:\n          return todo.completed;\n        case Filter.Active:\n          return !todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    const queryCorrect = query.trim().toLowerCase() || '';\n\n    if (queryCorrect) {\n      copyOfTodos = copyOfTodos.filter(todo => (\n        todo.title.toLowerCase().includes(queryCorrect)\n      ));\n    }\n\n    return copyOfTodos;\n  }, [status, query, todos]);\n\n  const handleClose = () => {\n    setUserId(0);\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const getTodoInfo = (todo: Todo, id: number) => {\n    setUserId(id);\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <div className=\"block\">\n                <TodoList\n                  todos={filteredTodos}\n                  currentTodo={currentTodo}\n                  getTodoInfo={getTodoInfo}\n                />\n              </div>\n            )}\n\n            {hasError && (\n              <p className=\"notification is-warning\">\n                There are no todos\n              </p>\n            )}\n\n            {!filteredTodos.length && query && (\n              <p className=\"notification is-warning\">\n                There are no todos by your criteria\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          userId={userId}\n          handleClose={handleClose}\n\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}